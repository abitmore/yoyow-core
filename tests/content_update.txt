Content_update ���ݽṹ����
1.	�û�����ƽ̨Ȩ��
\\libraries\chain\include\graphene\chain\account_object.hpp
1.	enum Platform_Auth_Permission  
2.	{  
3.	    Platform_Permission_Forward  = 1,   //����ƽ̨ת�����£�Ĭ������
4.	    Platform_Permission_Liked    = 2,   //����ƽ̨���޻��֣�Ĭ������
5.	    Platform_Permission_Buyout   = 4,   //����ƽ̨����������棬Ĭ������
6.	    Platform_Permission_Comment  = 8,   //����ƽ̨�����������£�Ĭ������
7.	    Platform_Permission_Reward   = 16,  //����ƽ̨�����������£�Ĭ������
8.	    Platform_Permission_Transfer = 32   //����ƽ̨������Ǯת�ˣ�Ĭ�ϲ�����
9.	};
����˵�����û�����ƽ̨�ܴ����û���������Ȩ�ޣ�ʹ��uint32_t�ı�־λ������֮����Ȩ����չ����������ƽ̨�����˻���������Ҫ�˻���Ȩ���������ʧЧ��



2.	������������Ȩ��
\\libraries\chain\include\graphene\chain\content_object.hpp
1.	enum Post_Permission  
2.	{  
3.	    Post_Permission_Forward = 1,   //��������ת����Ĭ������
4.	    Post_Permission_Liked   = 2,   //����������֡����ޣ�Ĭ������
5.	    Post_Permission_Buyout  = 4,   //���������������棬Ĭ������
6.	    Post_Permission_Comment = 8,   //�����������ۣ�Ĭ������
7.	    Post_Permission_Reward  = 16   //�����������ͣ�Ĭ������
8.	};
����˵�������ߣ����ƽ̨���������µ�Ȩ�ޣ�ʹ��uint32_t�ı�־λ�����ж����µ���ز�������Ҫ���ߴ��������Ȩ�ޣ��������ʵЧ��



3. ��������
\\libraries\chain\include\graphene\chain\protocol\content.hpp
1.	enum Post_Type  
2.	{  
3.	   Post_Type_Post = 0,                 //������
4.	   Post_Type_Comment = 1,              //����
5.	   Post_Type_forward = 2,              //ת��������
6.	   Post_Type_forward_And_Modify = 3,  //ת�����޸ĵ�����
7.	  
8.	   Post_Type_Default  
9.	};
����˵�������������µ����ͣ�������ϡ�



4. account_auth_platform_operation
\\libraries\chain\include\graphene\chain\protocol\account.hpp
1.	struct account_auth_platform_operation : public base_operation  
2.	{  
3.	   struct ext  
4.	   {  
5.	        optional<share_type> limit_for_platform;  //��չ�� �˻�����ƽ̨ʹ����Ǯ������޶���޶�ʹ�����ˣ�����ƽ̨�����˻���Ǯ�Ĳ�����ʧ�ܣ�ֱ���˻����ƽ̨�޶
6.	        optional<uint32_t>   permission_flags;    //��չ�� �˻�����ƽ̨Ȩ�ޣ�Ȩ�ް���־λ�趨�������趨�μ� Platform_Auth_Permission
7.	   };  
8.	  
9.	   typedef static_variant< ext > extension_parameter;  
10.	  
11.	   struct fee_parameters_type  
12.	   {  
13.	      uint64_t fee              = 1 * GRAPHENE_BLOCKCHAIN_PRECISION;  
14.	      uint64_t min_real_fee     = 0;  
15.	      uint16_t min_rf_percent   = 0;  
16.	      extensions_type   extensions;  
17.	   };  
18.	  
19.	   fee_type                   fee;  
20.	   account_uid_type           uid;  
21.	   account_uid_type           platform;  
22.	  
23.	  optional< flat_set<extension_parameter> > extensions;  
24.	};
����˵�����˻���Ȩƽ̨����ԭ����account_auth_platform_operation�����ϣ���չ�����˶���Ȩƽ̨������Ǯ���޶�Լ�ƽ̨��������������޶���



5. post_operation
\\libraries\chain\include\graphene\chain\protocol\content.hpp
1.	class Recerptor_Parameter  //��չ�����������˲���
2.	{  
3.	public:  
4.	   uint16_t       cur_ratio;     //��չ: ��ǰ����������ռ��
5.	   bool           to_buyout;     //��չ�������Ƿ���ۣ����۱������ô����Լ��ĵ�ǰռ�ȣ���������Ŀǰ�������ˣ�����ƽ̨���Ѿ�����5�ˣ�����ȫ�������Լ�������ռ��
6.	   uint16_t       buyout_ratio;  //��չ��������۱�����
7.	   share_type     buyout_price;  //��չ��������ۼ۸�
8.	   time_point_sec buyout_expiration = time_point_sec::maximum();  //��չ��������۹���ʱ�䣬��ʱ����ڣ���������۽���Ч
9.	}  
10.	  
11.	struct post_operation : public base_operation  
12.	{  
13.	   struct ext  
14.	   {  
15.	        uint8_t                                                post_type = Post_Type_Post;      //��չ���������ͣ��μ�Post_Type
16.	        optional<share_type>                                   forward_price;                    //��չ��ת����
17.	        optional< map<account_uid_type, Recerptor_Parameter> > receiptors;                       //��չ�������������б����б�ǿ�ư�������ƽ̨����ǿ��ռ��25%�������޸ġ������б���������������[2,5]֮ǰ
18.	        optional<license_lid_type>                             license_lid;                      //��չ����������id
19.	        uint32_t                                               permission_flags = 0xFFFFFFFF;  //��չ������Ȩ�ޣ��μ�Post_Permission
20.	   };  
21.	   typedef static_variant< ext > extension_parameter;  
22.	  
23.	   struct fee_parameters_type {  
24.	      uint64_t fee              = 1 * GRAPHENE_BLOCKCHAIN_PRECISION;  
25.	      uint32_t price_per_kbyte  = 10 * GRAPHENE_BLOCKCHAIN_PRECISION;  
26.	      uint64_t min_real_fee     = 0;  
27.	      uint16_t min_rf_percent   = 0;  
28.	      extensions_type   extensions;  
29.	   };  
30.	  
31.	   fee_type                     fee;  
32.	  
33.	   post_pid_type                post_pid;  
34.	   account_uid_type             platform = 0;  
35.	   account_uid_type             poster = 0;  
36.	   optional<account_uid_type>   origin_poster;  
37.	   optional<post_pid_type>      origin_post_pid;  
38.	   optional<account_uid_type>   origin_platform;  
39.	  
40.	   string                       hash_value;  
41.	   string                       extra_data = "{}";  
42.	   string                       title;  
43.	   string                       body;  
44.	  
45.	  optional< flat_set<extension_parameter> > extensions;  
46.	};
����˵������ԭ����post_operation�����ϣ��������������ͣ�����ת���ۣ��������ɣ�����Ȩ�ޣ��Լ������������б�����չ���ԡ�



6.	post_update_operation
\\libraries\chain\include\graphene\chain\protocol\content.hpp
1.	struct post_update_operation : public base_operation  
2.	{  
3.	   struct ext  
4.	   {  
5.	        optional<share_type>           forward_price;     //��չ���޸ĵ�����ת����
6.	        optional<account_uid_type>     receiptor;         //��չ���������˻�id
7.	        optional<bool>                 to_buyout;         //��չ���Ƿ��������
8.	        optional<uint16_t>             buyout_ratio;      //��չ������������������۱������ô����Լ��ĵ�ǰռ�ȡ���������Ŀǰ�������ˣ�����ƽ̨���Ѿ�����5�ˣ�����ȫ�������Լ�������ռ�ȡ�
9.	        optional<share_type>           buyout_price;      //��չ����������۸�
10.	        optional<time_point_sec>       buyout_expiration; //��չ�����۹ҵ�����ʱ��
11.	        optional<license_lid_type>     license_lid;        //��չ����������id
12.	        optional<uint32_t>             permission_flags;  //��չ������Ȩ�ޣ��μ�Post_Permission
13.	   };  
14.	   typedef static_variant< ext > extension_parameter;  
15.	  
16.	   struct fee_parameters_type {  
17.	      uint64_t fee              = 1 * GRAPHENE_BLOCKCHAIN_PRECISION;  
18.	      uint32_t price_per_kbyte  = 10 * GRAPHENE_BLOCKCHAIN_PRECISION;  
19.	      uint64_t min_real_fee     = 0;  
20.	      uint16_t min_rf_percent   = 0;  
21.	      extensions_type   extensions;  
22.	   };  
23.	  
24.	   fee_type                     fee;  
25.	  
26.	   account_uid_type             platform;  
27.	   account_uid_type             poster;  
28.	   post_pid_type                post_pid;  
29.	  
30.	   optional< string >           hash_value;  
31.	   optional< string >           extra_data;  
32.	   optional< string >           title;  
33.	   optional< string >           body;  
34.	  
35.	  optional< flat_set<extension_parameter> > extensions;  
36.	};
����˵������ԭ����post_update_operation�����ϣ�����������ת���ۣ���������id������Ȩ�ޣ��Լ����������˵��Ƿ�����������棬��������ȣ����ۼ۸񣬹ҵ���Чʱ�����չ���ԡ�



7.	score_create_operation
\\libraries\chain\include\graphene\chain\protocol\content.hpp
1.	struct score_create_operation : public base_operation  
2.	{  
3.	   struct fee_parameters_type {  
4.	       uint64_t fee = 1 * GRAPHENE_BLOCKCHAIN_PRECISION;  
5.	       uint32_t price_per_kbyte = 10 * GRAPHENE_BLOCKCHAIN_PRECISION;  
6.	       uint64_t min_real_fee = 0;  
7.	       uint16_t min_rf_percent = 0;  
8.	       extensions_type   extensions;  
9.	   };  
10.	  
11.	   fee_type                     fee;  //������
12.	  
13.	   account_uid_type             from_account_uid;  //��ֻ���޷������˻�id
14.	   account_uid_type             platform;          //��������ƽ̨
15.	   account_uid_type             poster;            //���µ�����
16.	   post_pid_type                post_pid;          //���µ�id
17.	   int8_t                       score;             //���´�ķ�����������ΧΪ-5~5
18.	   share_type                   csaf;              //��ֻ���޻��ѵĻ���
19.	  
20.	   extensions_type              extensions;  //��չ��
21.	};
����˵��������score_create_operation�������˻������½��д�ֻ��ߵ��ޡ�������Ҫ���Ŵ��Ȩ�ޣ��û���Ҫ��Ȩƽ̨���Ȩ�ޣ��������ʧ�ܡ����ݿ�ײ��½�score_object���洢�����Ϣ��ÿһ���������ڻ�ο������Ϣ���������档�������ı���ʱ�䣨�����»�����������ģ�score_object�ᱻ���ݿ�ɾ����



8. reward_operation
\\libraries\chain\include\graphene\chain\protocol\content.hpp
1.	struct reward_operation : public base_operation  
2.	{  
3.	   struct fee_parameters_type {  
4.	       uint64_t fee = 1 * GRAPHENE_BLOCKCHAIN_PRECISION;  
5.	       uint32_t price_per_kbyte = 10 * GRAPHENE_BLOCKCHAIN_PRECISION;  
6.	       uint64_t min_real_fee = 0;  
7.	       uint16_t min_rf_percent = 0;  
8.	       extensions_type   extensions;  
9.	   };  
10.	  
11.	   fee_type                     fee;  //������
12.	  
13.	   account_uid_type             from_account_uid; //���ͷ������˻�id
14.	   account_uid_type             platform;          //��������ƽ̨
15.	   account_uid_type             poster;            //��������
16.	   post_pid_type                post_pid;          //����id
17.	   asset                        amount;            //���͸����µ��ʲ���������������ʲ�
18.	  
19.	   extensions_type              extensions;  //��չ��
20.	};
����˵��������reward_operation�������˻������½��д��͡�������Ҫ���Ŵ���Ȩ�ޣ�����ʧ�ܡ����͵��ʲ����������������ʲ������޶�ΪYOYO�������͵��ʲ������µ��������Ű����������ƽ�֣�������ֱ�ӽ��㣬������������价�ڡ�



9. reward_proxy_operation
\\libraries\chain\include\graphene\chain\protocol\content.hpp
1.	struct reward_proxy_operation : public base_operation  
2.	{  
3.	    struct fee_parameters_type {  
4.	        uint64_t fee = 1 * GRAPHENE_BLOCKCHAIN_PRECISION;  
5.	        uint32_t price_per_kbyte = 10 * GRAPHENE_BLOCKCHAIN_PRECISION;  
6.	        uint64_t min_real_fee = 0;  
7.	        uint16_t min_rf_percent = 0;  
8.	        extensions_type   extensions;  
9.	    };  
10.	  
11.	    fee_type                     fee;  //������
12.	  
13.	    account_uid_type             from_account_uid; //�������͵��˻�id
14.	    account_uid_type             platform;          //��������ƽ̨
15.	    account_uid_type             poster;            //��������
16.	    post_pid_type                post_pid;          //���µ�id
17.	    share_type                   amount;            //���ϸ����µĽ�����������ƽ̨�����û��������˴��Ƕ����˻�����Ǯ����ʹ���˻�����ƽ̨����Ǯ�޶�
18.	  
19.	    extensions_type              extensions;  //��չ��
20.	};
����˵��������reward_proxy_operation������ƽ̨�����˻����������¡�������Ҫ���Ŵ���Ȩ�ޣ��û���Ҫ��Ȩƽ̨����Ȩ�ޣ�����ʧ�ܡ��ò��������˻�����ƽ̨����Ǯ�������˻�����ƽ̨�Ķ�ȣ�����ʲ�������YOYO����ƽ̨�������˻������������͵ġ����͵�YOYO�����µ��������Ű����������ƽ�֣�������ֱ�ӽ��㣬������������价�ڡ�



10. buyout_operation
\\libraries\chain\include\graphene\chain\protocol\content.hpp
1.	struct buyout_operation : public base_operation  
2.	{  
3.	   struct fee_parameters_type {  
4.	       uint64_t fee = 1 * GRAPHENE_BLOCKCHAIN_PRECISION;  
5.	       uint32_t price_per_kbyte = 10 * GRAPHENE_BLOCKCHAIN_PRECISION;  
6.	       uint64_t min_real_fee = 0;  
7.	       uint16_t min_rf_percent = 0;  
8.	       extensions_type   extensions;  
9.	   };  
10.	  
11.	   fee_type                     fee;  //������
12.	  
13.	   account_uid_type             from_account_uid;       //�����������ķ����˻�id
14.	   account_uid_type             platform;               //��������ƽ̨
15.	   account_uid_type             poster;                 //���µ�����
16.	   post_pid_type                post_pid;               //���µ�id
17.	   account_uid_type             receiptor_account_uid; //Ҫ��ϵ������˵�id
18.	  
19.	   extensions_type              extensions;  //��չ��
20.	}; 
����˵��������buyout_operation���������������˶���������ȵĽ��ס�������Ҫ�������Ȩ�ޣ��û���Ҫ��Ȩƽ̨���Ȩ�ޣ�����ʧ�ܡ��ò��������˻���Ǯ�������û�����ƽ̨�Ķ�ȡ�������ϵ�YOYO��ӷ����˻�����Ǯת�����������˻�����Ǯ��



11. license_create_operation
\\libraries\chain\include\graphene\chain\protocol\content.hpp
1.	struct license_create_operation : public base_operation  
2.	{  
3.	    struct fee_parameters_type {  
4.	        uint64_t fee = 1 * GRAPHENE_BLOCKCHAIN_PRECISION;  
5.	        uint32_t price_per_kbyte = 10 * GRAPHENE_BLOCKCHAIN_PRECISION;  
6.	        uint64_t min_real_fee = 0;  
7.	        uint16_t min_rf_percent = 0;  
8.	        extensions_type   extensions;  
9.	    };  
10.	  
11.	    fee_type                     fee;  //������
12.	  
13.	    license_lid_type             license_lid;      //���ɵ�id
14.	    account_uid_type             platform = 0;     //��������ƽ̨
15.	    uint8_t                      type;              //�������ͣ�Ŀǰ��Χδ��
16.	    string                       hash_value;        //���ɵ�hash
17.	    string                       extra_data = "{}"; //���ɵĶ�������
18.	    string                       title;              //���ɵı���
19.	    string                       body;               //���ɵ�����
20.	  
21.	    extensions_type              extensions;  //��չ��
22.	};
����˵��������license_create_operation������ƽ̨�û��½��������ɡ����ݿ�ײ��½�license_object���洢������������ֻ�����½����������޸ġ�����������������Ҫ�޸ĵ�ʱ�����½��������ݣ��������������ɺš�



12.	 score_object
\\libraries\chain\include\graphene\chain\content_object.hpp
1.	class score_object : public graphene::db::abstract_object<score_object>  
2.	{  
3.	public:  
4.	   static const uint8_t space_id = implementation_ids;  
5.	   static const uint8_t type_id = impl_score_object_type;  
6.	  
7.	   account_uid_type    from_account_uid; //��ֻ���޵ķ����˻�id
8.	   account_uid_type    platform;         //��������ƽ̨
9.	   account_uid_type    poster;            //��������
10.	   post_pid_type       post_pid;          //���µ�id
11.	   int8_t              score;             //��ֵķ�������ΧΪ-5~5
12.	   share_type          csaf;              //���ѵĻ�����
13.	  
14.	   time_point_sec      create_time;      //����ʱ��
15.	};
����˵�������ݿ�����score_object���ڴ洢���޴����Ϣ��ÿһ���������ڻ�ο������Ϣ���������档�������ı���ʱ�䣨�����»�����������ģ�score_object�ᱻ���ݿ�ɾ����



13. license_object
\\libraries\chain\include\graphene\chain\content_object.hpp
1.	class license_object : public graphene::db::abstract_object<license_object>  
2.	{  
3.	public:  
4.	    static const uint8_t space_id = implementation_ids;  
5.	    static const uint8_t type_id = impl_license_object_type;  
6.	  
7.	    license_lid_type             license_lid;    //���ɵ�id
8.	    account_uid_type             platform;       //ƽ̨�˻���id
9.	    uint8_t                      license_type;   //�������ͣ���ʱû��Ԥ����������
10.	     
11.	    string                       hash_value;     //���ɵ�hash
12.	    string                       extra_data;     //���ɵĶ�������
13.	    string                       title;           //���ɵı���
14.	    string                       body;            //���ɵ�����
15.	  
16.	    time_point_sec               create_time;    //���ɵĴ���ʱ��
17.	};
����˵�������ݿ�����license_object���ڴ洢ƽ̨�û��½���������Ϣ������ֻ����ƽ̨���������Ҳ��ɱ��޸ġ��û��������µ�ʱ����Ҫѡ��ƽ̨��������Ӧ�����ɡ�




14. active_post_object
\\libraries\chain\include\graphene\chain\content_object.hpp
1.	��Ծ����:  
2.	   class active_post_object : public graphene::db::abstract_object < active_post_object >  
3.	   {  
4.	         account_uid_type                       platform;           // ƽ̨�˺�  
5.	         account_uid_type                       poster;             // �����˺�  
6.	         post_pid_type                          post_pid            // ͬһ�˺�ͬһƽ̨������Ψһ��ʶ��pid��  
7.	         vector<score_id_type>                  scores;             // ��ֱ�ʶ����  
8.	         share_type                             total_amount        // �����ܹ�����;  
9.	         flat_map<asset_aid_type, share_type>   total_rewards;      // ���´���  
10.	         uint64_t                               period_sequence;    // ������������������  
11.	   };  




15. ���»������չ
1.	struct extension_parameter_type  
2.	{  
3.	     uint32_t   content_award_interval              = GRAPHENE_DEFAULT_CONTENT_AWARD_INTERVAL;                // ���ݽ������ڡ���ʼֵΪ0  
4.	     uint32_t   platform_award_interval             = GRAPHENE_DEFAULT_PLATFORM_AWARD_INTERVAL;               // ƽ̨ͶƱ�������ڡ���ʼֵΪ0  
5.	     share_type max_csaf_per_approval               = GRAPHENE_DEFAULT_MAX_CSAF_PER_APPROVAL;                 // �������������֡���ʼֵΪ1000����  
6.	     uint32_t   approval_expiration                 = GRAPHENE_DEFAULT_APPROVAL_EXPIRATION;                   // ���޹���ʱ�䡣��ʼֵΪ1��  
7.	     share_type min_effective_csaf                  = GRAPHENE_DEFAULT_MIN_EFFECTIVE_CSAF;                    // ���²�������������С���֡���ʼֵΪ100����  
8.	     share_type total_content_award_amount          = GRAPHENE_DEFAULT_TOTAL_CONTENT_AWARD_AMOUNT;            // �ܹ����½�������ʼֵΪ0��һ����  
9.	     share_type total_platform_content_award_amount = GRAPHENE_DEFAULT_TOTAL_PLATFORM_CONTENT_AWARD_AMOUNT;   // ƽ̨�����������潱������ʼֵΪ0��һ����  
10.	     share_type total_platform_voted_award_amount   = GRAPHENE_DEFAULT_TOTAL_PLATFORM_VOTED_AWARD_AMOUNT;     // �ܹ�ƽ̨ͶƱ��������ʼֵΪ0��һ����  
11.	     share_type platform_award_min_votes            = GRAPHENE_DEFAULT_PLATFORM_AWARD_MIN_VOTES;              // ƽ̨��������������СͶƱ������ʼֵΪ10  
12.	     uint32_t   platform_award_requested_rank       = GRAPHENE_DEFAULT_PLATFORM_AWARD_REQUESTED_RANK;         // ƽ̨������������ͶƱ����������ʼֵΪ100  
13.	     uint32_t   platform_award_basic_rate           = GRAPHENE_DEFAULT_PLATFORM_AWARD_BASIC_RATE;             // ƽ̨ͶƱ�����л���������ƽ�ָ�ƽ̨������ʼֵΪ20%  
14.	     uint32_t   casf_modulus                        = GRAPHENE_DEFAULT_CASF_MODULUS;                          // ���־���ֵ+ ������*����/5)*ϵ������Ȩƽ��ϵ������ʼֵΪ200%  
15.	     uint32_t   post_award_expiration               = GRAPHENE_DEFAULT_POST_AWARD_EXPIRATION;                 // ������������ʱ�䡣��ʼֵΪ1��  
16.	     uint32_t   approval_casf_min_weight            = GRAPHENE_DEFAULT_APPROVAL_MIN_CASF_WEIGHT;              // ���޻�����СȨ�ء���ʼֵΪ50%  
17.	     uint32_t   approval_casf_first_rate            = GRAPHENE_DEFAULT_APPROVAL_CASF_FIRST_RATE;              // ������Ч���ֱ���һ����ʼֵΪ30%  
18.	     uint32_t   approval_casf_second_rate           = GRAPHENE_DEFAULT_APPROVAL_CASF_SECOND_RATE;             // ������Ч���ֱ���������ʼֵΪ70%//��Ч���ֱ�����Ӧ�ô�����Ч���ֱ���һ  
19.	     uint32_t   receiptor_award_modulus             = GRAPHENE_DEFAULT_RECEIPTOR_AWARD_MODULUS;               // ����ʤʱ���ȴ����ޣ����������˽���ϵ������ʼֵΪ80%  
20.	     uint32_t   disapprove_award_modulus            = GRAPHENE_DEFAULT_DISAPPROVE_AWARD_MODULUS;              // ����ʤʱ���ȴ����ޣ�����߽���ϵ������ʼֵΪ120%  
21.	 };  



